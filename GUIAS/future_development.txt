Quizás sería mejor poner la generación de conexiones entre habitaciones a lo último, así no hay pasillos tan largos
Sería conectar cada habitación con la próxima más cercana que no esté conectada aún

Hueso de regreso

Implementar uso de portales para teletransportarse a otros portales

Puerta que no te deje pasar si no tienes una llave, gastas la llave

Puerta de dungeon que te lleve a otra subcampaña con su propio mapa

Pociones de revivir, propias o para amigos

Moverse con wasd

Meter pescaos y tiles de agua

Bruma de guerra, no se ve la habitación hasta que estás en ella

generar NPCs en las habitaciones también

conectar campaign reaction con la eneración de mapa

conectar player creation o el mismísimo save character con las tiles de spawn

arreglar el targeteo de ataque cuando se mete un nombre de monstruo que está afuera del rango de ataque

Una x rosada o blanca para los bosses opcionales y tesoros por fuera del rango de visión

Quizás pasar de matriz(array) de numpy a matriz(diccionario), la cosa es que no debería de ser tan lento el de array, no es un for de acceso sino de iterator/copia, O quién sabe, probar

poner íconos de estadísticas en player creation, también texto de colores

<input type="hidden" name="campaign_id" value="{{ campaign_id }}">

/see inventory

/talk




''' DESCRIPTIONS:

    BASICS
is_playable:    Is the character playable for the user, or it's an NPC like a merchant?
name:           the entity's name
story:          the character itself can own a proper story.
physical_description: Useful for prompts.
image:          the entity's image, to be seen on the character's interface, above the statistics.
race:           In rpg games, there's plenty of anthropomorphycal species to choose, not only humans.
class:          Every entity (Character or Monster) has a "role" among their group, as warriors, magicians, archers...

    STATS DESCRIPTIONS
max_health:     the entity begins his health in this state, and can't surpass it.
health:         Can be reduced by attacks, and restored by skills and items used from the inventory. 
                The entity dies if his health reaches 0 (or below). 
                If the player reaches a new level, his health recovers to the max_health state.
strength:       Damage points added to physical attacks
intelligence:   damage points added to magical attacks
dexterity:      defines who attacks/acts first in a battle
physical_resistance:    damage points reduced when the entity receives a physical attack.
magical_resistance:     damage points reduced when the entity receives a magical attack.
constitution:   damage points reduced when an entity receives an effect or a damaging state, like venom or poison. Effects/States resistance.

    PROGRESS DESCRIPTIONS
level:      the entity's level. The entity can level up by gaining experience points (exp). 
            The exp needed to reach a new level is calculated by a formula, 
            and it's increased with every new level.
exp:        the entity's experience points. The entity gains exp by defeating monsters, 
            (or completing quests and by using items, in posible future features). 
            When the entity reaches a new level, his exp is reset to 0.

    COORDINATES DESCRIPTIONS
x:      the entity's position in the x axis of the map
y:      the entity's position in the y axis of the map
icon:   in a map, this small squared image can be seen to represent that entity

    WEAPON DESCRIPTIONS
is_ranged:      a weapon can be melee or ranged, so it's a bool.
weapon_type:    there's plenty of weapon types, as swords, axes, bows, knifes... 
                (In future releases features, certain races could have a better 
                handle of certain weapon types)
damage_type:    That weapon can affect the enemies in different ways, as physical or magical ones.
'''

# -----------------------------------------------------

'''  AVALIABLE VALUES (AUTOGENERATED, BETA):

weapon_type: [Sword, Axe, Mace, Hammer, Spear, Bow, Crossbow, Dagger, Knife, Staff, Wand, Rod, Club, Whip, Flail, Sling, Shield, Gauntlet, Brass Knuckles, Claws, Teeth, Tail, Tentacle, Horn, Hoof, Wing, Tail, Beak, Pincers, Stinger, Spikes, Spines, Quills, Spores]

damage_type: [physical, magical]

(not exising yet) weapon_effects: Acid, Poison, Venom, Fire, Ice, Lightning, Earth, Wind, Water, Light, Dark, Holy, Unholy, Arcane, Eldritch, Psychic, Sound, Force, Gravity, Time, Space, Reality, Void, Chaos, Order, Life, Death, Nature, Technology, Alchemy, Enchantment, Necromancy, Illusion, Divination, Conjuration, Evocation, Abjuration, Transmutation, Restoration, Destruction, Creation, Summoning, Binding, Banishing, Sealing, Warding, Hexing, Cursing, Blessing, Healing, Buffing, Debuffing, Disabling, Enfeebling, Empowering, Strengthening, Weakening, Fortifying, Weakening, Draining, Siphoning, Absorbing, Reflecting, Redirecting, Amplifying, Diminishing, Nullifying, Negating, Dispelling, Countering]

character_race: [Human, Elf, Dwarf, Halfling, Gnome, Orc, Goblin, Troll, Ogre, Minotaur, Centaur, Satyr, Siren, Mermaid, Dryad, Nymph, Faun, Gorgon, Cyclops, Sphinx, Chimera, Hydra, Golem, Wraith, Zombie, Skeleton, Ghost, Ghoul, Mummy, Lich, Vampire, Werewolf, Lycanthrope, Dragonborn]

character_class: [Warrior, Mage, Archer, Thief, Paladin, Cleric, Druid, Bard, Monk, Barbarian, Sorcerer, Warlock, Ranger, Rogue, Fighter, Wizard, Necromancer, Alchemist, Blacksmith, Merchant, Farmer, Fisherman, Hunter, Cook, Miner, Lumberjack, Carpenter, Tailor, Leatherworker, Jeweler, Enchanter, Herbalist, Apothecary, Scribe, Scholar, Historian, Librarian, Teacher, Student, Artist, Musician, Dancer, Actor, Entertainer, Jester, Acrobat, Tamer, Beastmaster, Summoner, Illusionist, Seer, Oracle, Diviner, Medium, Shaman, Witch, Warlord, General, Commander, Captain, Lieutenant, Sergeant, Corporal, Private, Recruit, Soldier, Guard, Knight, Squire, Page, Noble, Lord, Lady, King, Queen, Prince, Princess, Duke, Duchess, Count, Countess, Baron, Baroness, Viscount, Viscountess, Marquis, Marquise, Emperor, Empress, Highness, Majesty

monster_race: [Goblin, Orc, Troll, Ogre, Minotaur, Centaur, Satyr, Harpy, Siren, Naga, Mermaid, Dryad, Nymph, Faun, Gorgon, Cyclops, Sphinx, Chimera, Hydra, Basilisk, Manticore, Griffin, Hippogriff, Pegasus, Unicorn, Phoenix, Roc, Wyvern, Dragon, Demon, Angel, Devil, Elemental, Golem, Specter, Wraith, Zombie, Skeleton, Ghost, Ghoul, Mummy, Lich, Vampire, Werewolf, Lycanthrope, Dragonborn, Elf, Dwarf, Halfling, Gnome, Orc, Goblin, Troll, Ogre, Minotaur, Centaur, Satyr, Harpy, Siren, Naga, Mermaid, Dryad, Nymph, Faun, Gorgon, Cyclops, Sphinx, Chimera, Hydra, Basilisk, Manticore, Griffin, Hippogriff, Pegasus, Unicorn, Phoenix, Roc, Wyvern, Dragon, Demon, Angel, Devil, Elemental, Golem, Specter, Wraith, Zombie, Skeleton, Ghost, Ghoul, Mummy, Lich, Vampire, Werewolf, Lycanthrope, Dragonborn, Elf, Dwarf, Halfling, Gnome, Orc, Goblin, Troll, Ogre, Minotaur, Centaur, Satyr, Harpy, Siren, Naga, Mermaid, Dryad, Nymph, Faun, Gorgon, Cyclops, Sphinx, Chimera, Hydra, Basilisk, Manticore, Griffin, Hippogriff, Pegasus, Unicorn, Phoenix, Roc, Wyvern, Dragon, Demon, Angel, Devil, Elemental, Golem, Specter, Wraith, Zombie, Skeleton]

monster_class: (The same as character_class)


'''

# -----------------------------------------------------


''' FUTURE DEVELOPMENT:

Weapon.effects:      str    (list or dict, interpretation needed)
Weapon.unique:       bool   (If the weapon is going to be modified, then we'll need to create a new one
                            to not modify that weapon template. This way, we will not have duplicated 
                            weapons for each entity)

Character.inventory: str    (list or dict, interpretation needed)
Character.exp_top:   int    (this could be an alternative way to calculate each exp_top for each level, 
                            we would increase that top manually when the character levels up. With this,
                            we could know easier when a character has enough exp to level up.)

Monster.inventory:   str    (list or dict, interpretation needed)
Monster.item_drop:   str    (list or dict, interpretation needed)

Skill.name:          str
Skill.uses:          int
Skill.type:          str    (Area, point/s or line/s)
Skill.damage_type:   str    (Physical, Magic)
Skill.range:         int
Skill.coords:        str    (list, interpretation needed)

Maybe a Story or Campaign class will be needed.

#-----------------------------------------------------
inventory and drop format example:
{'Small HP Potion': 3, 'Big HP Potion': 1, 'Trowable Knife': 5}
convert that to a str and save it?

options:
    https://stackoverflow.com/questions/22340258/list-field-in-model 
    https://stackoverflow.com/questions/402217/how-to-store-a-dictionary-on-a-django-model
    https://copyprogramming.com/howto/how-to-store-a-dictionary-in-a-django-database-model-s-field


Create the other templates for monsters and character stats.
Create their respective commands for creation and deletion.

Combinar funciones get_weapon
Crear get_bare_hands que simplemente llame a get_weapon_template con weapon_name='Bare hands'
Con cada mejora de arma, es permitido cambiar el nombre del arma y queda +level (por ejemplo +5)
Poner field Weapon.level
Función Weapon.level_up()

Se puede subir el daño, o range_upgrades (sólo para ranged weapons)

Cada 3 range_upgrades, sube un punto el range

'''